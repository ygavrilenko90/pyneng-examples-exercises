######################################
### Форматирование строк.  Списки  ###
######################################

###символы >, < в шаблонах метода format()

output = "{:10}{:20}{:20}\n"*2
print(output.format("fa0/1", "10.1.9.9", "255.255.255.252", "fa0/10", "192.168.1.1", "255.255.255.0",))

# в данном случае вывод такой:
# fa0/1     10.1.9.9            255.255.255.252     
# fa0/10    192.168.1.1         255.255.255.0 


### По дефолту: строки выравнивание левое, числа - правое ###
# если в форматированную строку передавать число - данный элемент тогда выравнивается по правому краю
#  и получается наложение цифр на строки:

print(output.format(1, "10.1.9.9", "255.255.255.252", 10, "192.168.1.1", "255.255.255.0",))

        #  110.1.9.9            255.255.255.252     
        # 10192.168.1.1         255.255.255.0 

# для выравнивания чисел по левому краю:
output = "{:<10} {:20} {:20}\n"*2
print(output.format(1, "10.1.9.9", "255.255.255.252", 10, "192.168.1.1", "255.255.255.0",))

# 1         10.1.9.9            255.255.255.252     
# 10        192.168.1.1         255.255.255.0 

# для выравнивания строк по правому краю:

output = "{:<10} {:>20} {:>20}\n"*2
print(output.format(1, "10.1.9.9", "255.255.255.252", 10, "192.168.1.1", "255.255.255.0",))

# 1                      10.1.9.9      255.255.255.252
# 10                  192.168.1.1        255.255.255.0

###### Конвертация типов данных с помощью форматирования строк ######

template =  "{:b}{:b}{:b}{:b}"
print(template.format(10, 1, 1, 4)) #101011100

template =  "{:b} {:b} {:b} {:b}"
print(template.format(10, 1, 1, 4)) #1010 1 1 100

# дополнение нулями до восьми символов, шаблон такой:

template =  "{:08b} {:08b} {:08b} {:08b}"
print(template.format(10, 1, 1, 4)) #00001010 00000001 00000001 00000100

template = "{:9}{:9}{:9}{:9}\n{:08b} {:08b} {:08b} {:08b}"
print(template.format(10, 1, 1, 50, 10, 1, 1, 50))

#        10        1        1       50
#  00001010 00000001 00000001 00110010
# в шаблоне после ":" выравнивание, до ":" - подстановка оп индексам:

template = "{0:<9}{1:<9}{2:<9}{3:<9}\n{0:08b} {1:08b} {2:08b} {3:08b}"
print(template.format(192, 168, 100, 1))

# 192      168      100      1        
# 11000000 10101000 01100100 00000001

print('{:>10}'.format('test'))
########12345678910
#с отступом   test 

print('{:9}{:9}'.format('test1', 'test2'))
#test1    test2 
#123456789123456789
###### F-строки позволяют применять методы для строк, выражения и подставлять значения переменных######

cmd = "switchport trunk allowed vlan"
vlans = "1,2,3,4,5"
print(cmd + " " + vlans) #switchport trunk allowed vlan 1,2,3,4,5
print(f"{cmd} {vlans}") #switchport trunk allowed vlan 1,2,3,4,5

print(f"{cmd.upper()} {vlans}") #SWITCHPORT TRUNK ALLOWED VLAN 1,2,3,4,5
print(f"{cmd.upper()} {vlans.split(',')}") #SWITCHPORT TRUNK ALLOWED VLAN ['1', '2', '3', '4', '5']

oct1, oct2, oct3, oct4 = 192, 168, 100, 50
print(oct1, oct2, oct3, oct4) #192 168 100 50

print(f"{oct1:<9}{oct2:<9}{oct3:<9}{oct4:<9}\n{oct1:08b} {oct2:08b} {oct3:08b} {oct4:08b}")

# 192      168      100      50       
# 11000000 10101000 01100100 00110010

a = "{} {}"
print(a.format('one', 'two')) #one two
#просмотрел 18.06

a = 10
b = "Privet"
c,d,e = "Medved", ["one", "two", "three"], ("et_1_kort", "el_2_kort")

print(a,b,c,d,e, type(e))